<!DOCTYPE html>
<html>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="prism-library/prism.js"></script>
    <link href="prism-library/prism.css" rel="stylesheet" />
    <style>
        html {
            min-width: fit-content;
        }

        body {
            background-color: #000000;
            background-image: linear-gradient(147deg, #000000 0%, #434343 74%);
            background-attachment: fixed;
            text-align: center;
        }

        #clouds-cover {
            width: 1000px;
            height: 800px;
            background-image: url("img/clouds.gif");
            /* background-attachment: fixed; */
            background-repeat: no-repeat;
            background-size: cover;
            opacity: 0.01;
            z-index: 0;
            position: absolute;
        }

        table {
            font-family: arial, sans-serif;
            border-collapse: collapse;
            width: 100%;
        }

        td,
        th {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }

        tr:nth-child(even) {
            background-color: #000000;
        }

        audio {
            display: none;
        }

        canvas {
            border: 1px solid #d3d3d3;
            float: left;
            z-index: 2;
        }

        h1 {
            border-bottom: solid 1px white;
        }

        #right-box {
            color: white;
            margin: 20px;
            margin-left: 1020px;
            height: 760px;
            text-align: left;
            padding: 20px;
            background-color: #000000;
            background-image: linear-gradient(147deg, #000000 0%, #434343 74%);
            border: 1px solid #d3d3d3;
            overflow-y: auto;
        }

        .button {
            width: 100%;
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            font-size: 16px;
            cursor: pointer;
            display: inline-block;
        }

        .button:hover {
            color: black;
        }

        #bot-button {
            display: none;
        }

        @media only screen and (max-width: 1227px) {
            canvas {
                float: none;
            }

            #right-box {
                margin-left: 20px;
            }

            #top-button {
                display: none;
            }

            #bot-button {
                display: none;
            }

        }

        img {
            width: 180px;
        }
    </style>

    <audio id="car-sound-fx">
        <source src="./sound/car_sound_fx.mp3" type="audio/mp3">
    </audio>

    <audio id="airplane-sound-fx">
        <source src="./sound/airplane.mp3" type="audio/mp3">
    </audio>
</head>

<body onload="startCanvas()">

    <div id="clouds-cover"></div>

    <div id="right-box">
        <div class="box-header">
            <button id="top-button" class="button" onclick="addCss()">Visualizar documentação abaixo</button>
            <button id="bot-button" class="button" onclick="addCss()">Visualizar documentação na aba lateral</button>
        </div>
        <h2>Função responsável pelo 'looping' da animação</h2>
        <pre><code class="language-js">
var delay = 0;
const delayMilliseconds = 250;

function loopCars() {
    car3GoRight = Math.floor(Math.random() * 10);
    for (var i = 0; i < 50; i++) {
        delay = i * delayMilliseconds;
        doTimeoutCar1(i, delay);
        doTimeoutCar2(i, delay);
        doTimeoutCar3(i, delay);
        doTimeoutAirplane(i, delay);
    }
}
        </code></pre>
        <p>- O script chama esta função no início e no final do looping dos carros (pela função do movimento do carro
            1).
            <br><br>
            - A variável <code class="language-js">car3GoRight</code> é responsável por determinar se o carro 3
            (vermelho)
            irá para a direita ou não; de forma alternada varia entre numeros aleatórios de 0 à 9. Se a variável for maior que 4, o carro irá para direita.
            <br><br>
            - Cada função chamada dentro do 'for' é responsável por executar o movimento dos objetos no Canvas.
            <br><br>
            - A lógica é feita através de um <code class="language-js">setTimeOut()</code> incremental. Já que o
            movimento é feito em 50 momentos (determinados pelo looping do 'for'), o delay atual é definido pela relação
            do momento atual (variável incremental 'i') e do delay inicial (constante 'delayMilliseconds')
        </p>
        <h1>Canvas e objeto 'component'</h1>
        <p>O Canvas é criado com as dimensões 1000x800; nele os objetos são instanciados com a seguinte função:
            <br>
        <pre><code class="language-js">function component(width, height, image, x, y, angle) ...</code></pre>
        <table>
            <tr>
                <th>Propriedade</th>
                <th>O que faz?</th>
            </tr>
            <tr>
                <td>width</td>
                <td>dita a largura com que o objeto surge</td>
            </tr>
            <tr>
                <td>height</td>
                <td>determina a altura do objeto</td>
            </tr>
            <tr>
                <td>image</td>
                <td>deve ser passado o caminho da imagem (as imagens usadas são do tipo .png)</td>
            </tr>
            <tr>
                <td>x</td>
                <td>a posição no eixo x</td>
            </tr>
            <tr>
                <td>y</td>
                <td>a posição no eixo y</td>
            </tr>
            <tr>
                <td>angle</td>
                <td>ângulo da imagem</td>
            </tr>
        </table>
        </p>
        <h1>Carro 1 (preto)</h1>
        <img src="img/car1.png" style="float: left; margin-top: 40px;" alt="">
        <h4>Posição:</h4>
        <pre><code class="language-js">
car1 = new component(115, 75, "img/car1.png", -115, 160, 0);
        </code></pre>
        <table>
            <tr>
                <th>Propriedade</th>
                <th>-</th>
            </tr>
            <tr>
                <td>width</td>
                <td><code class="language-js">115px</code></td>
            </tr>
            <tr>
                <td>height</td>
                <td><code class="language-js">75px</code></td>
            </tr>
            <tr>
                <td>image</td>
                <td><code class="language-js">"img/car1.png"</code></td>
            </tr>
            <tr>
                <td>x</td>
                <td><code class="language-js">-115</code></td>
            </tr>
            <tr>
                <td>y</td>
                <td><code class="language-js">160</code></td>
            </tr>
            <tr>
                <td>angle</td>
                <td><code class="language-js">0</code></td>
            </tr>
        </table>
        <h4>Movimento:</h4>
        <p>
            - o movimento do carro 1, exclusivamente, é feito quando a condição que diz: 'quando o contador não está entre 0 e 25 é aplicada a função <code class="language-js">move("right", car1)</code>'; a função faz o carro mover-se à direita. Quando a condição não é satisfeita (contador entre 0 e 25), o movimento do carro é limpo pela função <code class="language-js">clearmove(car1)</code> e ele permanece parado no semáforo 1 <span style="color: red;">Vermelho</span>.
            <br><br>
            - com o contador em 2, o efeito sonoro dos carros é tocado
            <br><br>
            - o semáforo 2 permanece <span style="color: green;">Verde</span> com o contador entre 0 e 25
            <br><br>
            - o semáforo 1 permanece, com o contador entre 0 e 25, <span style="color: red;">Vermelho</span>; e maior ou igual a 25, <span style="color: green;">Verde</span>; até que quando maior que 38 se torna <span style="color: yellow;">Amarelo</span>.
            <br><br>
            - quando o contador atingir seu último número (49), o movimento será reiniciado com a chamada da função <code class="language-js">resetcar1()</code>, fazendo com que o carro assuma a posição inicial novamente e que os semáforos voltem às cores iniciais.
            <br><br>
            - excepcionalmente, aproveita-se o looping incremental de movimento para chamar novamente a função <code class="language-js">loopCars()</code> e recomeçar todos os movimentos.
        </p>
        <pre><code class="language-js"> 
function doTimeoutCar1(i, delay) {
    setTimeout(function () {
        if ((i > 0) && (i < 25)) {
            if (i == 2) {
                carsSound = document.getElementById("car-sound-fx");
                carsSound.volume = 0.4;
                carsSound.currentTime = 0;
                carsSound.play();
            }
            sem2 = new component(115, 115, "img/semGreen.png", 350, 70, 0);
            sem1 = new component(115, 115, "img/semRed.png", 100, 70, 0);
            if (i > 7)
                clearmove(car1);
            if (i >= 24) {
                sem1 = new component(115, 115, "img/semGreen.png", 100, 70, 0);
            }
        }
        else if (i == 49) {
            resetcar1();
            loopCars();
        } else {
            if (i > 38)
                sem1 = new component(115, 115, "img/semYellow.png", 100, 70, 0);
            move("right", car1);
        }
    }, delay);
}
        </code></pre>

        <h1>Carro 2 (prata)</h1>
        <img src="img/car2.png" style="width: 100px; float: left;" alt="">
        <h4>Posição:</h4>
        <pre><code class="language-js">
car2 = new component(75, 115, "img/car2.png", 212, -250, 0);
        </code></pre>
        <br style="clear: both;">
        <h4>Movimento:</h4>
        <pre><code class="language-js">
function doTimeoutCar2(i, delay) {
    setTimeout(function () {
        if (i > 18 && i < 25) {
            sem2 = new component(115, 115, "img/semYellow.png", 350, 70, 0);
            if (i >= 24)
                sem2 = new component(115, 115, "img/semRed.png", 350, 70, 0);
        } else if (i == 49) {
            resetcar2();
        } else {
            move("down", car2);
        }
    }, delay);
}
    </code></pre>

        <h1>Carro 3 (vermelho)</h1>
        <img src="img/car3.png" style="float: left; width: 100px;" alt="">
        <h4>Posição:</h4>
        <pre><code class="language-js">
car3 = new component(75, 115, "img/car3.png", 250, -115, 0);
        </code></pre>
        <br style="clear: both;">
        <h4>Movimento:</h4>
        <pre><code class="language-js">
function doTimeoutCar3(i, delay) {
    setTimeout(function () {
        if (i <= 9)
            move("down", car3);
        else if (i == 10 && car3GoRight > 4) {
            move("rotate", car3);

        } else if (i == 49) {
            resetcar3();
        } else if (car3GoRight > 4)
            move("right", car3);
    }, delay);
}   
        </code></pre>

        <h1>Avião</h1>
        <img src="img/airplane.png" style="float: left; width: 180px; margin-top: 30px;" alt="">
        <h4>Posição:</h4>
        <pre><code class="language-js">
airplane = new component(350, 350, "img/airplane.png", -150, -150, 0);
        </code></pre>
        <br style="clear: both;">
        <h4>Movimento:</h4>
        <pre><code class="language-js">
function doTimeoutAirplane(i, delay) {
    setTimeout(function () {
        if (i == 19) {
            airplaneAudio = document.getElementById("airplane-sound-fx");
            airplaneAudio.volume = 0.3;
            airplaneAudio.currentTime = 0.1;
            airplaneAudio.play();
        }
        if (i > 25) {
            move("right", airplane);
            move("down", airplane);
        }
        if (i == 49)
            resetAirplane();
    }, delay);
}
        </code></pre>
    </div>
    <script>
        var car1;
        var car2;
        var car3;
        var airplane;
        var myBackground;
        var sem1;
        var sem2;
        var day = true;
        var car3GoRight = 0;
        var view = true;

        var car1Url = "img/car1.png";
        var car2Url = "img/car2.png";
        var car3Url = "img/car3.png";
        var airplaneUrl = "img/airplane.png"

        function startCanvas() {
            airplane = new component(350, 350, airplaneUrl, -150, -150, 0);
            car1 = new component(115, 75, car1Url, -115, 160, 0);
            car2 = new component(75, 115, car2Url, 212, -250, 0);
            car3 = new component(75, 115, car3Url, 250, -115, 0);
            sem1 = new component(115, 115, "img/semYellow.png", 100, 70, 0);
            sem2 = new component(115, 115, "img/semGreen.png", 350, 70, 0);
            myBackground = new component(1000, 800, "img/background.png", 0, 0, 0);

            myGameArea.start();
            move("right", car1);
        }

        function changeDayAndNight() {
            if (!day) {
                document.getElementById("clouds-cover").style.opacity = "0.05";
                myBackground = new component(1000, 800, "img/background.png", 0, 0, 0);

                car1Url = "img/car1.png";
                car1.image.src = "img/car1.png";

                car2Url = "img/car2.png";
                car2.image.src = "img/car2.png";

                car3Url = "img/car3.png";
                car3.image.src = "img/car3.png";

                airplaneUrl = "img/airplane.png";
                airplane.image.src = "img/airplane.png";
            }
            else {
                document.getElementById("clouds-cover").style.opacity = "0.1";
                myBackground = new component(1000, 800, "img/background_night.png", 0, 0, 0);

                car1Url = "img/car1_night.png";
                car1.image.src = "img/car1_night.png";

                car2Url = "img/car2_night.png";
                car2.image.src = "img/car2_night.png";

                car3Url = "img/car3_night.png";
                car3.image.src = "img/car3_night.png";

                airplaneUrl = "img/airplane_night.png";
                airplane.image.src = "img/airplane_night.png";
            }
            day = !day;
        }

        function addCss() {
            if (view) {
                myGameArea.canvas.style.float = "none";
                document.getElementById("clouds-cover").style.float = "none"
                //TODO
                document.getElementById("clouds-cover").style.display = "none"
                document.getElementById("right-box").style.marginLeft = "20px";
                document.getElementById("top-button").style.display = "none";
                document.getElementById("bot-button").style.display = "block";
            }
            else {
                myGameArea.canvas.style.float = "left";
                document.getElementById("clouds-cover").style.float = "left"
                document.getElementById("clouds-cover").style.display = "block"
                document.getElementById("right-box").style.marginLeft = "1020px";
                document.getElementById("top-button").style.display = "block";
                document.getElementById("bot-button").style.display = "none";
            }
            view = !view;
        }

        var myGameArea = {
            canvas: document.createElement("canvas"),
            start: function () {
                this.canvas.width = 1000;
                this.canvas.height = 800;
                this.context = this.canvas.getContext("2d");
                document.body.insertBefore(this.canvas, document.body.childNodes[0]);
                this.frameNo = 0;
                this.interval = setInterval(updateGameArea, 20);
            },
            clear: function () {
                this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
            },
            stop: function () {
                clearInterval(this.interval);
            }
        }

        function component(width, height, image, x, y, angle) {
            this.image = new Image();
            this.image.src = image;
            this.width = width;
            this.height = height;
            this.speedX = 0;
            this.speedY = 0;
            this.x = x;
            this.y = y;
            this.angle = 0;

            this.update = function () {
                ctx = myGameArea.context;
                ctx.save();
                ctx.translate(this.x, this.y);
                ctx.rotate(this.angle);
                ctx.drawImage(this.image,
                    this.x,
                    this.y,
                    this.width, this.height,
                );
                ctx.restore();
            }
            this.newPos = function () {
                this.x += this.speedX;
                this.y += this.speedY;
            }
        }

        function updateGameArea() {
            myGameArea.clear();
            myBackground.newPos();
            myBackground.update();
            car1.newPos();
            car1.update();
            car2.newPos();
            car2.update();
            car3.newPos();
            car3.update();
            sem1.newPos();
            sem1.update();
            sem2.newPos();
            sem2.update();
            airplane.newPos();
            airplane.update();

        }

        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

        async function move(dir, car) {

            if (dir == "down") { car ? car.speedY = 2 : null; }
            if (dir == "right") { car ? car.speedX = 2 : null; }
            if (dir == "rotate") {
                for (var i = 0; i < 90; i++) {
                    car.angle -= 1 * Math.PI / 180;
                    await sleep(0.1);
                    car.y += 2.4 + (0.035 * i);
                    car.x -= 0.95 + (0.03 * i);
                }
            }
        }

        function clearmove(car) {
            car.speedX = 0;
            car.speedY = 0;
        }

        function resetcar1() {
            sem1 = new component(115, 115, "img/semYellow.png", 100, 70, 0);
            car1 = new component(115, 75, car1Url, -115, 160, 0);
        }

        function resetAirplane() {
            airplane = new component(350, 350, airplaneUrl, -150, -150, 0);
        }

        function resetcar2() {
            car2 = new component(75, 115, car2Url, 212, -250, 0);
        }

        function resetcar3() {
            car3 = new component(75, 115, car3Url, 250, -115, 0);
        }

        var delay = 0;
        const delayMilliseconds = 250;

        function doTimeoutCar1(i, delay) {
            setTimeout(function () {
                if ((i > 0) && (i < 25)) {
                    if (i == 2) {
                        carsSound = document.getElementById("car-sound-fx");
                        carsSound.volume = 0.8;
                        carsSound.currentTime = 0;
                        carsSound.play();
                    }
                    sem2 = new component(115, 115, "img/semGreen.png", 350, 70, 0);
                    sem1 = new component(115, 115, "img/semRed.png", 100, 70, 0);
                    if (i > 7)
                        clearmove(car1);
                    if (i >= 24) {
                        sem1 = new component(115, 115, "img/semGreen.png", 100, 70, 0);
                    }
                }
                else if (i == 49) {
                    resetcar1();
                    loopCars();
                } else {
                    if (i > 38)
                        sem1 = new component(115, 115, "img/semYellow.png", 100, 70, 0);
                    move("right", car1);
                }
            }, delay);
        }

        function doTimeoutCar2(i, delay) {
            setTimeout(function () {
                if (i > 18 && i < 25) {
                    sem2 = new component(115, 115, "img/semYellow.png", 350, 70, 0);
                    if (i >= 24)
                        sem2 = new component(115, 115, "img/semRed.png", 350, 70, 0);
                } else if (i == 49) {
                    resetcar2();
                } else {
                    move("down", car2);
                }
            }, delay);
        }

        function doTimeoutCar3(i, delay) {
            setTimeout(function () {
                if (i <= 9)
                    move("down", car3);
                else if (i == 10 && car3GoRight > 4) {
                    move("rotate", car3);

                } else if (i == 49) {
                    resetcar3();
                } else if (car3GoRight > 4)
                    move("right", car3);
            }, delay);
        }

        function doTimeoutAirplane(i, delay) {
            setTimeout(function () {
                if (i == 19) {
                    airplaneAudio = document.getElementById("airplane-sound-fx");
                    airplaneAudio.volume = 0.3;
                    airplaneAudio.currentTime = 0.1;
                    airplaneAudio.play();
                }
                if (i > 25) {
                    move("right", airplane);
                    move("down", airplane);
                }
                if (i == 49)
                    resetAirplane();
            }, delay);
        }

        function loopCars() {
            car3GoRight = Math.floor(Math.random() * 10);
            for (var i = 0; i < 50; i++) {
                delay = i * delayMilliseconds;
                doTimeoutCar1(i, delay);
                doTimeoutCar2(i, delay);
                doTimeoutCar3(i, delay);
                doTimeoutAirplane(i, delay);
            }
        }
        loopCars();
    </script>
</body>

<footer style="color: white;">&copy; Davi M. Acorsi</footer>
<a href="#" style="color: white;" onclick="changeDayAndNight()">Boa noite!</a>

</html>